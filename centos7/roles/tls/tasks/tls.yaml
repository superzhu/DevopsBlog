- name: render ip to openssl configuration file
  template:
    src: templates/openssl.cnf.j2 
    dest: /etc/kubernetes/pki/openssl.cnf
  when: (redo is undefined) or ( redo == true)


# Generate Single Root Certificate Authority
- name: Generate self-signed root certificate for Kubernetes general CA
  shell: |
    openssl genrsa -out ca.key 2048
    openssl req -x509 -new -nodes -key ca.key -config openssl.cnf -subj "/CN=kubernetes-ca" -extensions v3_ca -out ca.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: Generate self-signed root certificate for all etcd-related functions
  shell: |
    openssl genrsa -out etcd/ca.key 2048
    openssl req -x509 -new -nodes -key etcd/ca.key -config openssl.cnf -subj "/CN=etcd-ca" -extensions v3_ca -out etcd/ca.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: Generate self-signed root certificate for the front-end proxy
  shell: |
    openssl genrsa -out front-proxy-ca.key 2048
    openssl req -x509 -new -nodes -key front-proxy-ca.key -config openssl.cnf -subj "/CN=kubernetes-front-proxy-ca" -extensions v3_ca -out front-proxy-ca.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


# Generating all certificates
- name: kube-etcd (etcd-server) used by command-- etcd (1)
  shell: |
    openssl genrsa -out etcd/server.key 2048
    openssl req -new -key etcd/server.key -subj "/CN=kube-etcd" -out etcd/server.csr
    openssl x509 -in etcd/server.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/server.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: kube-etcd-peer used by command-- etcd(2)
  shell: |
     openssl genrsa -out etcd/peer.key 2048
     openssl req -new -key etcd/peer.key -subj "/CN=kube-etcd-peer" -out etcd/peer.csr
     openssl x509 -in etcd/peer.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/peer.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)



- name: kube-etcd-healthcheck-client used by command-- etcdctl (3)
  shell: |
    openssl genrsa -out etcd/healthcheck-client.key 2048
    openssl req -new -key etcd/healthcheck-client.key -subj "/CN=kube-etcd-healthcheck-client" -out etcd/healthcheck-client.csr
    openssl x509 -in etcd/healthcheck-client.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out etcd/healthcheck-client.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: apiserver-etcd-client used by command-- kube-apiserver (4)
  shell: |
    openssl genrsa -out apiserver-etcd-client.key 2048
    openssl req -new -key apiserver-etcd-client.key -subj "/CN=etcd-client/O=system:masters" -out apiserver-etcd-client.csr
    openssl x509 -in apiserver-etcd-client.csr -req -CA etcd/ca.crt -CAkey etcd/ca.key -CAcreateserial -extensions v3_req_etcd -extfile openssl.cnf -out apiserver-etcd-client.crt -days 10000
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: front-proxy-client used by command-- kube-apiserver (5)
  shell: |
    openssl genrsa -out  front-proxy-client.key 2048
    openssl req -new -key front-proxy-client.key -subj "/CN=front-proxy-client" -out front-proxy-client.csr
    openssl x509 -req -in front-proxy-client.csr -CA front-proxy-ca.crt -CAkey front-proxy-ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out front-proxy-client.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: kube-apiserver used by command-- kube-apiserver (6)
  shell: |
    openssl genrsa -out apiserver.key 2048
    openssl req -new -key apiserver.key -subj "/CN=kube-apiserver" -config openssl.cnf -out apiserver.csr
    openssl x509 -req -in apiserver.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_apiserver -extfile openssl.cnf -out apiserver.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: kube-scheduler used by command-- kube-scheduler (7)
  shell: |
    openssl genrsa -out  kube-scheduler.key 2048
    openssl req -new -key kube-scheduler.key -subj "/CN=system:kube-scheduler/O=system:kube-scheduler" -out kube-scheduler.csr
    openssl x509 -req -in kube-scheduler.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out kube-scheduler.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: sa (service account,kube-controller-manager 8)
  shell: |
    openssl genrsa -out  sa.key 2048
    openssl ecparam -name secp521r1 -genkey -noout -out sa.key
    openssl ec -in sa.key -outform PEM -pubout -out sa.pub
    openssl req -new -sha256 -key sa.key -subj "/CN=system:kube-controller-manager" -out sa.csr
    openssl x509 -req -in sa.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out sa.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: admin (kubectl 9)
  shell: |
    openssl genrsa -out admin.key 2048
    openssl req -new -key admin.key -subj "/CN=admin/O=system:masters" -out admin.csr
    openssl x509 -req -in admin.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out admin.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)

- name: apiserver-kublet-client (10)
  shell: |
    openssl genrsa -out apiserver-kubelet-client.key 2048
    openssl req -new -key apiserver-kubelet-client.key -subj "/CN=apiserver-kubelet-client/O=system:masters" -out apiserver-kubelet-client.csr
    openssl x509 -req -in apiserver-kubelet-client.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out apiserver-kubelet-client.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)

- name: kube-proxy (11)
  shell: |
    openssl genrsa -out kube-proxy.key 2048
    openssl req -new -key kube-proxy.key -subj "/CN=system:kube-proxy/O=system:node-proxier" -out kube-proxy.csr
    openssl x509 -req -in kube-proxy.csr -CA ca.crt -CAkey ca.key -CAcreateserial -days 10000 -extensions v3_req_client -extfile openssl.cnf -out kube-proxy.crt
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash
  when: (redo is undefined) or ( redo == true)


- name: 清理 srl
  shell: find . -name "*.srl" -exec rm -f {} \;
  args:
    chdir: /etc/kubernetes/pki/
    executable: /bin/bash

